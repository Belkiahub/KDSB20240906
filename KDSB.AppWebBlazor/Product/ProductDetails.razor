@page "/product-details/{Id:int}"
@using KDSB.DTOs.ProducDTOs;
@using Microsoft.AspNetCore.Components.Forms;
@using KDSB.AppWebBlazor.Data;

<h3>Ver Producto</h3>

<div class="row">
    <div class="col-4">
        <div class="form-group">
            <label for="Name">Nombre:</label>
            <input type="text" class="form-control" disabled @bind="productDTO.NombreKDSB" />
        </div>
    </div>
    <div class="col-4">
        <div class="form-group">
            <label for="LastName">Descripcion:</label>
            <input type="text" class="form-control" disabled @bind="productDTO.DescripcionKDSB" />
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <div class="form-group">
            <label for="Address">Precio:</label>
            <textarea disabled class="form-control" @bind="productDTO.Precio"></textarea>
        </div>
    </div>
</div>
<br>
<div class="row">
    <div class="col-12">
        <NavLink href="/product-list" class="btn btn-primary">Ir a buscar productos</NavLink>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    // Inyección de dependencia de CustomerService para acceder a sus métodos
    [Inject]
    ProductKDSBService productKDSBService { get; set; }

    // Creación de una instancia de GetIdResultCustomerDTO para almacenar los datos del cliente
    GetIdResultProductDTO productDTO = new GetIdResultProductDTO();

    /*
         *  se utiliza para realizar inicializaciones o tareas
         *  cuando se carga una página o componente de Blazor.
         * Este método se llama automáticamente cuando el componente se está inicializando
         *  antes de que se muestre en la interfaz de usuario.
         */
    protected override async Task OnInitializedAsync()
    {
        // En el momento de inicialización del componente, llama al método GetById de
        //  CustomerService para obtener los datos del cliente con el ID proporcionado
        productDTO = await productKDSBService.GetById(Id);
    }
}
